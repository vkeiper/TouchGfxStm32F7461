/*********************************************************************************/
/********** THIS FILE IS GENERATED BY TOUCHGFX DESIGNER, DO NOT MODIFY ***********/
/*********************************************************************************/
#ifndef SETTEMPCONTROL_VIEW_BASE_HPP
#define SETTEMPCONTROL_VIEW_BASE_HPP

#include <gui/common/FrontendApplication.hpp>
#include <mvp/View.hpp>
#include <gui/settempcontrol_screen/SetTempControlPresenter.hpp>
#include <touchgfx/widgets/Box.hpp>
#include <touchgfx/widgets/Image.hpp>
#include <touchgfx/widgets/Button.hpp>
#include <touchgfx/containers/Slider.hpp>
#include <touchgfx/widgets/TextArea.hpp>
#include <touchgfx/widgets/TextAreaWithWildcard.hpp>

class SetTempControlViewBase : public touchgfx::View<SetTempControlPresenter>
{
public:
    SetTempControlViewBase();
    virtual ~SetTempControlViewBase() {}

    /*
     * Custom Action Handlers
     */
    virtual void sliderMoved(int value)
    {
        // TODO override and implement this function in SetTempControlView
    }

    virtual void setReadTempColor(int value)
    {
        // TODO override and implement this function in SetTempControlView
    }

protected:
    FrontendApplication& application() { 
        return *static_cast<FrontendApplication*>(Application::getInstance()); 
    }

    /*
     * Member Declarations
     */
    touchgfx::Box backGround2;
    touchgfx::Image atdi_template480x2721;
    touchgfx::Button buttonOK;
    touchgfx::Slider slider;
    touchgfx::TextArea txtAreaSetTemp;
    touchgfx::TextAreaWithOneWildcard tempText;
    touchgfx::TextAreaWithOneWildcard textAreaReadTemp;

    /*
     * Wildcard Buffers
     */
    static const uint16_t TEMPTEXT_SIZE = 3;
    touchgfx::Unicode::UnicodeChar tempTextBuffer[TEMPTEXT_SIZE];
    static const uint16_t TEXTAREAREADTEMP_SIZE = 4;
    touchgfx::Unicode::UnicodeChar textAreaReadTempBuffer[TEXTAREAREADTEMP_SIZE];

private:

    /*
     * Callback Handler Declarations
     */
    void buttonCallbackHandler(const touchgfx::AbstractButton& src);
    void sliderValueChangedCallbackHandler(const touchgfx::Slider& src, int value);
    void sliderValueConfirmedCallbackHandler(const touchgfx::Slider& src, int value);

    /*
     * Callback Declarations
     */
    touchgfx::Callback<SetTempControlViewBase, const touchgfx::AbstractButton&> buttonCallback;
    touchgfx::Callback<SetTempControlViewBase, const touchgfx::Slider&, int> sliderValueChangedCallback;
    touchgfx::Callback<SetTempControlViewBase, const touchgfx::Slider&, int> sliderValueConfirmedCallback;

};

#endif // SETTEMPCONTROL_VIEW_BASE_HPP
